#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <GL/glut.h>

#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600
#define RECTANGLE_WIDTH 80
#define RECTANGLE_HEIGHT 40
#define QUEUE_SIZE 10
#define BOTTLE_WIDTH 80
#define BOTTLE_HEIGHT 400
#define TV_WIDTH 400
#define TV_HEIGHT 200

typedef struct {
    char name[20];
    bool removed;
} Object;

Object queue[QUEUE_SIZE];
int front = -1, rear = -1;
float waterLevel = 0.0f;
int count = 0;

enum MenuState { NONE, ADD, REMOVE };
enum MenuState currentMenuState = NONE;

float backgroundColor[3] = { 0.0f, 0.0f, 0.0f }; // Initial background color is black

char tvDisplayText[20] = ""; // Text to be displayed on the TV display

void updateDisplayText() {
    if (front == -1) {
        snprintf(tvDisplayText, sizeof(tvDisplayText), "Queue Empty");
    } else if (front == rear) {
        if (queue[front].removed) {
            snprintf(tvDisplayText, sizeof(tvDisplayText), "Element Removed");
        } else {
            snprintf(tvDisplayText, sizeof(tvDisplayText), "Element Added");
        }
    } else {
        if (queue[rear].removed) {
            snprintf(tvDisplayText, sizeof(tvDisplayText), "Element Removed");
        } else {
            snprintf(tvDisplayText, sizeof(tvDisplayText), "Element Added");
        }
    }
}

void enqueue(Object obj) {
    if ((front == 0 && rear == QUEUE_SIZE - 1) || (rear == (front - 1 + QUEUE_SIZE) % QUEUE_SIZE)) {
        printf("Queue is full!\n");
        snprintf(tvDisplayText, sizeof(tvDisplayText), "Queue Full");
        return;
    }
    else if (front == -1) {
        front = rear = 0;
    }
    else if (rear == QUEUE_SIZE - 1 && front != 0) {
        rear = 0;
    }
    else {
        rear = (rear + 1) % QUEUE_SIZE;
    }
    queue[rear] = obj;

    waterLevel += 40.0f; // Increment water level by rectangle height
    count++; // Increment the count of elements

    updateDisplayText();

    glutPostRedisplay(); // Request a redraw
}

void dequeue() {
    if (front == -1) {
        printf("Queue is empty!\n");
        snprintf(tvDisplayText, sizeof(tvDisplayText), "Queue Empty");
        return;
    }

    printf("Removing object: %s\n", queue[front].name);
    queue[front].removed = true;
    if (front == rear) {
        front = rear = -1;
    }
    else {
        front = (front + 1) % QUEUE_SIZE;
    }

    waterLevel -= 40.0f; // Decrement water level by rectangle height
    count--; // Decrement the count of elements

    snprintf(tvDisplayText, sizeof(tvDisplayText), "Element Removed");

    glutPostRedisplay(); // Request a redraw
}


void display() {
    glClearColor(backgroundColor[0], backgroundColor[1], backgroundColor[2], 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // Draw bottle
    glColor3f(0.8f, 0.8f, 0.8f); // Bottle color
    glBegin(GL_QUADS);
    glVertex2f(WINDOW_WIDTH - BOTTLE_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2);
    glVertex2f(WINDOW_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2);
    glVertex2f(WINDOW_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2 + BOTTLE_HEIGHT);
    glVertex2f(WINDOW_WIDTH - BOTTLE_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2 + BOTTLE_HEIGHT);
    glEnd();

    // Draw water
    if (count >= 10) {
        glColor3f(1.0f, 0.0f, 0.0f); // Water color (red)
    } else if (count >= 5) {
        glColor3f(1.0f, 0.5f, 0.0f); // Water color (orange)
    } else {
        glColor3f(0.0f, 1.0f, 0.0f); // Water color (blue)
    }

    glBegin(GL_QUADS);
    glVertex2f(WINDOW_WIDTH - BOTTLE_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2);
    glVertex2f(WINDOW_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2);
    glVertex2f(WINDOW_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2 + waterLevel);
    glVertex2f(WINDOW_WIDTH - BOTTLE_WIDTH - 20, (WINDOW_HEIGHT - BOTTLE_HEIGHT) / 2 + waterLevel);
    glEnd();

    int x = 60;
    int y = (WINDOW_HEIGHT / 2) - ((RECTANGLE_HEIGHT * QUEUE_SIZE + 20 * (QUEUE_SIZE - 1)) / 2);

    if (front != -1) {
        int i = front;
        int count = 0;
        while (count < QUEUE_SIZE && queue[i].name[0] != '\0') {
            if (!queue[i].removed) {
                if (i == front) {
                    glBegin(GL_QUADS);
                    glColor3f(1.0f, 0.0f, 0.0f); // Front box (most recently entered) in green
                }
                else if (i == rear) {
                    glBegin(GL_QUADS);
                    glColor3f(0.0f, 1.0f, 0.0f); // Rear box (least recently entered) in red
                }
                else {
                    glBegin(GL_QUADS);
                    glColor3f(0.5f, 0.5f, 0.5f); // Other boxes in gray
                }

                glVertex2f(x, y);
                glVertex2f(x + RECTANGLE_WIDTH, y);
                glVertex2f(x + RECTANGLE_WIDTH, y + RECTANGLE_HEIGHT);
                glVertex2f(x, y + RECTANGLE_HEIGHT);
                glEnd();

                glPushMatrix();
                glTranslatef(x + 10, y + 20, 0);
                glScalef(0.1f, 0.1f, 0.1f);
                glColor3f(0.0f, 0.0f, 0.0f);
                for (int j = 0; queue[i].name[j] != '\0'; j++) {
                    glutStrokeCharacter(GLUT_STROKE_ROMAN, queue[i].name[j]);
                }
                glPopMatrix();

                y += RECTANGLE_HEIGHT + 20;
            }

            i = (i + 1) % QUEUE_SIZE;
            count++;
        }
    }

    // Draw TV display
    glColor3f(1.0f, 1.0f, 1.0f); // TV color
    glBegin(GL_QUADS);
    glVertex2f((WINDOW_WIDTH - TV_WIDTH) / 2, (WINDOW_HEIGHT - TV_HEIGHT) / 2);
    glVertex2f((WINDOW_WIDTH + TV_WIDTH) / 2, (WINDOW_HEIGHT - TV_HEIGHT) / 2);
    glVertex2f((WINDOW_WIDTH + TV_WIDTH) / 2, (WINDOW_HEIGHT + TV_HEIGHT) / 2);
    glVertex2f((WINDOW_WIDTH - TV_WIDTH) / 2, (WINDOW_HEIGHT + TV_HEIGHT) / 2);
    glEnd();

    // Display text on the TV display
    glColor3f(0.0f, 0.0f, 0.0f); // Text color
    glPushMatrix();
    glTranslatef((WINDOW_WIDTH - 200) / 2, WINDOW_HEIGHT / 2, 0);
    glScalef(0.15f, 0.15f, 0.15f);
    for (int i = 0; tvDisplayText[i] != '\0'; i++) {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, tvDisplayText[i]);
    }
    glPopMatrix();

    glutSwapBuffers();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 27: {
            exit(0);
        }
    }
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        if (currentMenuState == ADD) {
            Object obj;
            printf("Enter object name: ");
            scanf("%s", obj.name);
            obj.removed = false;
            enqueue(obj);
        } else if (currentMenuState == REMOVE) {
            dequeue();
        }
        currentMenuState = NONE;
    }
}

void menu(int value) {
    switch (value) {
        case 1:
            currentMenuState = ADD;
            break;
        case 2:
            currentMenuState = REMOVE;
            break;
        case 3:
            backgroundColor[0] = 1.0f; // White: Red component
            backgroundColor[1] = 1.0f; // White: Green component
            backgroundColor[2] = 1.0f; // White: Blue component
            break;
        case 4:
            backgroundColor[0] = 0.0f; // Blue: Red component
            backgroundColor[1] = 0.0f; // Blue: Green component
            backgroundColor[2] = 1.0f; // Blue: Blue component
            break;
        case 5:
            backgroundColor[0] = 1.0f; // Yellow: Red component
            backgroundColor[1] = 1.0f; // Yellow: Green component
            backgroundColor[2] = 0.0f; // Yellow: Blue component
            break;
        case 6:
            backgroundColor[0] = 0.0f; // Black: Red component
            backgroundColor[1] = 0.0f; // Black: Green component
            backgroundColor[2] = 0.0f; // Black: Blue component
            break;
        case 7:
            exit(0);
            break;
    }
}

void initialize() {
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT);

    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);

    glutCreateMenu(menu);
    glutAddMenuEntry("Add Object", 1);
    glutAddMenuEntry("Remove Object", 2);
    glutAddMenuEntry("Change Color: White", 3);
    glutAddMenuEntry("Change Color: Blue", 4);
    glutAddMenuEntry("Change Color: Yellow", 5);
    glutAddMenuEntry("Change Color: Black", 6);
    glutAddMenuEntry("Exit", 7);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow("Queue Illustration");
    glutDisplayFunc(display);
    initialize();

    glutMainLoop();

    return 0;
}

